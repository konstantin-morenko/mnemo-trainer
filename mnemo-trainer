#!/usr/bin/perl

$minimum = 0;
$maximum = 9;

$begin = `date +%s`;
$start = `date +%s`;
# prepare array
@answers;
# @answers = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');
$length = $maximum - $minimum;
for($i = 0; $i <= $maximum - $minimum; $i++) {
    $answers[$i] = $minimum + $i;
}

@averageTimes, @counts;

while(true) {

    answering();

    #normalisation
    normalize();
    
    #prepare new array
    prepareQuestions();

    restBreak();
}

sub addTimes {
    my($pos, $time) = @_;
    if($counts[$pos]) {$averageTimes[$pos] = $averateTimes[$pos] + $time / $counts[$pos];}
    else {$averageTimes[$pos] = $time;}
    $counts[$pos]++;
}

sub answering {
    print "<question> (<left>)\n";
    print "<Enter> to continue\n";
    while($#answers >= 0) {
	$pos = int rand($#answers);
	print "$answers[$pos] ($#answers)";
	$start = `date +%s`;
	<STDIN>;
	addTimes($answers[$pos], `date +%s` - $start);
	$answers[$pos] = $answers[$#answers];
	delete($answers[$#answers]);
    }
}

sub normalize {
    foreach(@averageTimes) {
	if($_ < 1) {$_ = 1;}
	if($_ > 10) {$_ = 10;}
    }
    print "(@averageTimes)\n";
}

sub prepareQuestions {
    @answers = ();
    @counts = ();
    my($sum);
    for($j = 0; $j <= $#averageTimes; $j++) {
	#    print "[$j] $times[$j]\n";
	for($i = 0; $i < $averageTimes[$j]; $i++) {push(@answers, $j);}
	$sum += $averageTimes[$j];
    }
    print "[@answers] ";
    printf ("%2.1f\n", ($sum/$#averageTimes + 1));
    @averageTimes = ();
    $time = `date +%s` - $begin;
    print "Time: $time\n";
}

sub restBreak {
    my $pause = 30;
    my $delay = 5;
    for(; $pause > 0; $pause -= $delay) {
	print "Have a rest break for " . $pause . " s.\n";
	sleep($delay);
    }
    print "\nBegin?\n";
    <STDIN>;
}
