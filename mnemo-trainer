#!/usr/bin/perl

$minimum = 10;
$maximum = 19;

$begin = `date +%s`;
$start = `date +%s`;
$tries = 0;
$stars = -1;

# prepare array
@tasks;
# @answers = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');
$length = $maximum - $minimum;
@averageTimes, @counts;
for($i = 0; $i <= $maximum - $minimum; $i++) {
    # $tasks[$i] = $minimum + $i;
    $averageTimes[$i] = 1;
    $counts[$i] = 1;
}

opendir (CURDIR, "./");
while(readdir CURDIR) {
    if($_ =~ m/\.journal$/) {print "$_\n";}
}
print "Input journal file name: ";
$name = <STDIN>;
$name =~ s/\n//;
$journal = $name . ".journal";
open (jFile, "<", "$journal") or die "Can't open file $journal\n";
foreach my $task (<jFile>) {$task =~ s/\n//; push(@tasks, $task);}

normalize();
prepareQuestions();
ready();
while(true) {
    answering();
    normalize();
    prepareQuestions();
    restBreak();
}

sub addTimes {
    my($pos, $time) = @_;
    if($counts[$pos]) {$averageTimes[$pos] = $averateTimes[$pos] + $time / $counts[$pos];}
    else {$averageTimes[$pos] = $time;}
    $counts[$pos]++;
}

sub answering {
    print "<question> (<left>)\n";
    print "<Enter> to continue\n";
    my $strike;
    if($#questions > 100) {$strike = 100;}
    else {$strike = $#questions;}
    while($#questions >= 0) {
	if($strike >= 0) {
	    $pos = int rand($#questions);
	    print "[$strike/$#questions] ";
	    print "$tasks[$questions[$pos]]";
	    $start = `date +%s`;
	    getc(STDIN);
	    addTimes($questions[$pos], `date +%s` - $start);
	    $questions[$pos] = $questions[$#answers];
	    delete($questions[$#answers]);
	    $strike--;
	}
	else {
	    restBreak();
	    if($#questions > 100) {$strike = 100;}
	    else {$strike = $#questions;}
	}
    }
}

sub normalize {
    foreach(@averageTimes) {
	if($_ < 1) {$_ = 1;}
	if($_ > 10) {$_ = 10;}
    }
    $tries++;
}

sub prepareQuestions {
    @questions = ();
    @counts = ();
    my $sum = 0;
    my $max = 0;
    for($j = 0; $j <= $#averageTimes; $j++) {
	for($i = 0; $i < $averageTimes[$j]; $i++) {push(@questions, $j);}
	$sum += $averageTimes[$j];
	if($averageTimes[$j] > $max) {$max = $averageTimes[$j];}
    }
    $avr = $sum / ($#averageTimes + 1);
    if($avr < 1.51 && $max < 2.01) {$stars++;}
    else {$stars = 0};
    printf ("[%d %2.1f/%1d] ", $tries, $avr, $max);
    print "[";
    for($i = 1; $i <= 3; $i++) {
	if($i <= $stars) {print "*";}
	else {print " ";}
    }
    print "]\n";
    @averageTimes = ();
    $time = `date +%s` - $begin;
    # print "Time: $time\n";
}

sub restBreak {
    my $pause = 30;
    print "Have a rest break for $pause s.\n";
    sleep ($pause);
    ready();
}

sub ready {
    print "Ready?\n";
    <STDIN>;
}
